{"version":3,"sources":["Estimator/Estimator.tsx","Legend/Legend.tsx","App.tsx","index.tsx"],"names":["FPRForm","useState","numTransactions","numDataFiles","numDataFunctions","numExternalInterfaces","fp","state","setState","Item","label","type","onChange","e","parseInt","target","value","onClick","disabled","FPRLegendItem","props","split","style","width","description","FPRLegend","direction","App","className","Legend","Estimator","elem","document","getElementById","ReactDOM","createRoot","render"],"mappings":"iRAgEeA,EAjDkB,WAC/B,MAA0BC,mBAAgB,CACxCC,gBAAiB,EACjBC,aAAc,EACdC,iBAAkB,EAClBC,sBAAuB,EACvBC,GAAI,IACJ,mBANKC,EAAK,KAAEC,EAAQ,KActB,OACE,eAAC,IAAI,WACH,cAAC,IAAKC,KAAI,CAACC,MAAM,yBAAwB,SACvC,cAAC,IAAK,CAACC,KAAK,SAASC,SAAU,SAACC,GAAC,OAAKL,EAAS,2BAAKD,GAAK,IAAEL,gBAAiBY,SAASD,EAAEE,OAAOC,SAAS,MAEzG,cAAC,IAAKP,KAAI,CAACC,MAAM,uBAAsB,SACrC,cAAC,IAAK,CAACC,KAAK,SAASC,SAAU,SAACC,GAAC,OAAKL,EAAS,2BAAKD,GAAK,IAAEJ,aAAcW,SAASD,EAAEE,OAAOC,SAAS,MAEtG,cAAC,IAAKP,KAAI,CAACC,MAAM,2BAA0B,SACzC,cAAC,IAAK,CAACC,KAAK,SAASC,SAAU,SAACC,GAAC,OAAKL,EAAS,2BAAKD,GAAK,IAAEH,iBAAkBU,SAASD,EAAEE,OAAOC,SAAS,MAE1G,cAAC,IAAKP,KAAI,CAACC,MAAM,gCAA+B,SAC9C,cAAC,IAAK,CACJC,KAAK,SACLC,SAAU,SAACC,GAAC,OACVL,EAAS,2BACJD,GAAK,IACRF,sBAAuBS,SAASD,EAAEE,OAAOC,SACzC,MAIR,cAAC,IAAKP,KAAI,UACR,cAAC,IAAM,CAACE,KAAK,UAAUM,QA7BR,WACnB,IACMX,EAAuB,EADsDC,EAA3EL,gBACwC,EADmCK,EAA1DJ,aAC8C,EADYI,EAA5CH,iBAC4D,EADhBG,EAA1BF,sBAEzDG,EAAS,2BAAKD,GAAK,IAAED,OACvB,EAyBmD,SAAC,gCAIhD,cAAC,IAAKG,KAAI,CAACC,MAAM,4BAA2B,SAC1C,cAAC,IAAK,CAACM,MAAOT,EAAMD,GAAIY,UAAQ,QAIxC,E,kBC3DMC,EAAkE,SACtEC,GAEA,OACE,eAAC,IAAK,CAACC,MAAO,cAAC,IAAO,IAAI,UACxB,oBAAIC,MAAO,CAAEC,MAAO,SAAU,SAAEH,EAAMV,QACtC,+BAAOU,EAAMI,gBAGnB,EA6BeC,EA3Ba,WAC1B,OACE,eAAC,IAAK,CAACC,UAAW,WAAYL,MAAO,cAAC,IAAO,IAAI,UAC/C,cAAC,EAAa,CACZX,MAAM,wBACNc,YAAY,oNAEd,cAAC,EAAa,CACZd,MAAM,sBACNc,YAAY,yPAEd,cAAC,EAAa,CACZd,MAAM,0BACNc,YAAY,qNAEd,cAAC,EAAa,CACZd,MAAM,+BACNc,YAAY,uQAEd,cAAC,EAAa,CACZd,MAAM,yBACNc,YAAY,+KAIpB,ECnCe,SAASG,IACtB,OACE,sBAAKC,UAAU,MAAK,UAClB,6BAAI,6CACJ,6BAAI,4CACJ,cAACC,EAAM,IACP,cAACC,EAAS,MAGhB,CCPA,IAAMC,EAAYC,SAASC,eAAe,QACxBC,IAASC,WAAWJ,GAAc,0BAE/CK,OAAO,cAACT,EAAG,I","file":"static/js/main.9439f286.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport { Button, Form, Input } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nexport interface Props {}\r\n\r\nexport interface State {\r\n  numTransactions: number;\r\n  numDataFiles: number;\r\n  numDataFunctions: number;\r\n  numExternalInterfaces: number;\r\n  fp: number;\r\n}\r\n\r\nconst FPRForm: React.FC<Props> = () => {\r\n  const [state, setState] = useState<State>({\r\n    numTransactions: 0,\r\n    numDataFiles: 0,\r\n    numDataFunctions: 0,\r\n    numExternalInterfaces: 0,\r\n    fp: 0,\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    const { numTransactions, numDataFiles, numDataFunctions, numExternalInterfaces } = state;\r\n    const fp = numTransactions * 4 + numDataFiles * 3 + numDataFunctions * 3 + numExternalInterfaces * 3;\r\n    setState({ ...state, fp });\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Item label='Number of Transactions'>\r\n        <Input type='number' onChange={(e) => setState({ ...state, numTransactions: parseInt(e.target.value) })} />\r\n      </Form.Item>\r\n      <Form.Item label='Number of Data Files'>\r\n        <Input type='number' onChange={(e) => setState({ ...state, numDataFiles: parseInt(e.target.value) })} />\r\n      </Form.Item>\r\n      <Form.Item label='Number of Data Functions'>\r\n        <Input type='number' onChange={(e) => setState({ ...state, numDataFunctions: parseInt(e.target.value) })} />\r\n      </Form.Item>\r\n      <Form.Item label='Number of External Interfaces'>\r\n        <Input\r\n          type='number'\r\n          onChange={(e) =>\r\n            setState({\r\n              ...state,\r\n              numExternalInterfaces: parseInt(e.target.value),\r\n            })\r\n          }\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type='primary' onClick={handleSubmit}>\r\n          Calculate Function Points\r\n        </Button>\r\n      </Form.Item>\r\n      <Form.Item label='Estimated Function Points'>\r\n        <Input value={state.fp} disabled />\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FPRForm;\r\n","import React from \"react\";\r\nimport { Space, Divider } from \"antd\";\r\n\r\nconst FPRLegendItem: React.FC<{ label: string; description: string }> = (\r\n  props\r\n) => {\r\n  return (\r\n    <Space split={<Divider />}>\r\n      <h4 style={{ width: \"150px\" }}>{props.label}</h4>\r\n      <span>{props.description}</span>\r\n    </Space>\r\n  );\r\n};\r\n\r\nconst FPRLegend: React.FC = () => {\r\n  return (\r\n    <Space direction={\"vertical\"} split={<Divider />}>\r\n      <FPRLegendItem\r\n        label=\"Numero di transazioni\"\r\n        description=\"rappresenta il numero di volte che l'utente interagisce con l'applicazione e richiede un'azione. Ad esempio, se l'utente effettua un acquisto su un sito web, questo verrebbe conteggiato come una transazione.\"\r\n      />\r\n      <FPRLegendItem\r\n        label=\"Numero di file dati\"\r\n        description=\"rappresenta il numero di file che contengono i dati utilizzati dall'applicazione. Ad esempio, se l'applicazione utilizza un database per memorizzare i dati degli utenti, il numero di tabelle in quel database verrebbe conteggiato come file dati.\"\r\n      />\r\n      <FPRLegendItem\r\n        label=\"Numero di funzioni dati\"\r\n        description=\"rappresenta il numero di funzioni utilizzate per manipolare i dati. Ad esempio, se l'applicazione ha la capacitÃ  di cercare i dati degli utenti, questa funzione verrebbe conteggiata come una funzione dati.\"\r\n      />\r\n      <FPRLegendItem\r\n        label=\"Numero di interfacce esterne\"\r\n        description=\"rappresenta il numero di volte in cui l'applicazione comunica con altre fonti esterne. Ad esempio, se l'applicazione utilizza un'API esterna per ottenere informazioni meteorologiche, ogni chiamata a quell'API verrebbe conteggiata come un'interfaccia esterna.\"\r\n      />\r\n      <FPRLegendItem\r\n        label=\"Function Point stimati\"\r\n        description=\"rappresenta il valore stimato di Function Point per l'applicazione basato sui valori inseriti per le transazioni, i file dati, le funzioni dati e le interfacce esterne.\"\r\n      />\r\n    </Space>\r\n  );\r\n};\r\n\r\nexport default FPRLegend;\r\n","import \"./styles.css\";\nimport { Estimator } from \"./Estimator\";\nimport { Legend } from \"./Legend\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Costa's C# 4.7 Function Points Estimator</h1>\n      <h2>Start editing to see some magic happen!</h2>\n      <Legend />\n      <Estimator />\n    </div>\n  );\n}\n","/** @format */\n\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\n\nconst elem: any = document.getElementById('root');\nconst root: any = ReactDOM.createRoot(elem ? elem : <span></span>);\n\nroot.render(<App />);\n"],"sourceRoot":""}